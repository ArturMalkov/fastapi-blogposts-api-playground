name: Build and Deploy Code

# on: push
# on: pull_request
# on: [push, pull_request]

on: [push, pull_request]

# it's also possible to provide specific branches
# on:
#     push:
#         branches: ["main"]  # only works with push to main branch
# #         branches:
# #             - "main"
# #             - "another branch"
#     pull_request:
#         branches:
#             - "test_branch"
#             - "another branch"

# env:  # environment variables accessible for all jobs
#   DATABASE_HOSTNAME: localhost

jobs:
    build:
        environment:
          name: testing  # to access all the environment variables set in the corresponding environment in GitHub
        # set job-specific environment variables - accessible only from within that job
        env:
          DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
          DATABASE_PORT: ${{secrets.DATABASE_PORT}}
          DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
          DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          DATABASE_NAME: ${{secrets.DATABASE_NAME}}
          SECRET_KEY: ${{secrets.SECRET_KEY}}
          ALGORITHM: ${{secrets.ALGORITHM}}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
        services:
          postgres:  # create a PostgreSQL service container to use in workflow
            image: postgres  # pull image from DockerHub
            env:
              POSTGRES_USER: ${{secrets.DATABASE_USERNAME}}
              POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
              POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
            ports:
              - 5432:5432
            options: >-
              --health-cmd pg_isready
              --health-interval 10s
              --health-timeout 5s
              --health-retries 5

        runs-on: ubuntu-latest  # VM on which the job will be run
        steps:
            - name: pulling git repo
              uses: actions/checkout@v2  # grabbed from GitHub marketplace
#             - name: say hi to Artur
#               run: echo "hello Artur"
            # pre-build GitHub action - grabbed from GitHub marketplace
            - name: install Python version 3.10
              uses: actions/setup-python@v2
              with:
                python-version: "3.10"
            - name: update pip
              run: python -m pip install --upgrade pip  # runs command on Linux shell
            - name: install all dependencies
              run: pip install -r requirements.txt
            - name: test with pytest
              run: |
                pip install pytest
                pytest

            - name: login to Docker Hub
              uses: docker/login-action@v1
              with:
                username: ${{secrets.DOCKER_HUB_USERNAME}}
                password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}
            - name: setup Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v1

            - name: Build and push
              uses: docker/build-push-action@v3
              with:
                context: .
                file: ./Dockerfile
                push: true
                tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-playground-app
                cache-from: type=local,src=/tmp/.buildx-cache
                cache-to: type=local,dest=/tmp/.buildx-cache

            - name: Image digest
              run: echo ${{steps.docker-build.outputs.digest}}

    # responsible for pushing updates to our production environment
    deploy:
        runs-on: ubuntu-latest
        needs: [build]  # wait for the 'build' job to run before this job runs - by default, jobs are run in parallel
        environment:
          name: production
        env:
          HEROKU_EMAIL: ${{secrets.HEROKU_EMAIL}}
          HEROKU_APP_NAME: ${{secrets.HEROKU_APP_NAME}}
          HEROKU_API_KEY: ${{secrets.HEROKU_API_KEY}}
        steps:
            - name: pulling git repo
              uses: actions/checkout@v2
            - name: deploying to Heroku
              uses: akhileshns/heroku-deploy@v3.12.12
              with:
                heroku_api_key: ${{secrets.HEROKU_API_KEY}}
                heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
                heroku_email: ${{secrets.HEROKU_EMAIL}}

            - name: deploy to ubuntu server
              uses: appleboy/ssh-action@master
              with:
                host: ${{ secrets.PROD_HOST }}
                username: ${{ secrets.PROD_USERNAME }}
                password: ${{ secrets.PROD_PASSWORD }}
                script: |
                  cd app/src
                  git pull
                  echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart api